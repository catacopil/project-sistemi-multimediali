/* */#include <stdio.h>#include <stdlib.h>#include <time.h>#include <math.h>#include "GL/glut.h"GLint nNumPoints = 3;GLfloat ctrlPoints[3][3][3]= {{{  -8.0f, 0.0f, 4.0f},					{ -2.0f, 4.0f, 4.0f},					{  4.0f, 0.0f, 4.0f }},							 				{{  -4.0f, 0.0f, 0.0f},					{ -2.0f, 4.0f, 0.0f},					{  4.0f, 0.0f, 0.0f }},							  				{{  -4.0f, 0.0f, -4.0f},					{ -2.0f, 8.0f, -4.0f},					{  4.0f, 0.0f, -4.0f }}};void CambiaDim(int, int);void DisegnaTutto();void Azione(unsigned char key, int x, int y);void DrawPoints();void CambiaDim(int w, int h){	if(h == 0) h = 1;	glViewport(0, 0, w, h);	glMatrixMode(GL_PROJECTION);	glLoadIdentity();	glOrtho(-8.0f, 8.0f, -8.0f, 8.0f, -8.0f, 8.0f);	glMatrixMode(GL_MODELVIEW);	glLoadIdentity();}void DrawPoints(void){	int i,j;	glPointSize(5.0f);	glBegin(GL_POINTS);		for(i = 0; i < nNumPoints; i++)			for(j = 0; j < 3; j++)				glVertex3fv(ctrlPoints[i][j]);	glEnd();}float X, Y;void DisegnaTutto(){	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	glMatrixMode(GL_MODELVIEW);	glPushMatrix();	glRotatef(X, 0.0f, 1.0f, 0.0f);	glRotatef(Y, 1.0f, 0.0f, 0.0f);	// potrebbe essere impostata da fuori	glMap2f(GL_MAP2_VERTEX_3,	// tipo di dati generati	0.0f,						// u min	10.0f,						// u max	3,							// distanza tra i punti nei dati	3,							// ordine curva in u	0.0f,						// v min	10.0f,						// v max	9,							// distanza tra i punti nei dati	3,							// ordine curva in v	&ctrlPoints[0][0][0]);	glEnable(GL_MAP2_VERTEX_3);	glMapGrid2f(12,0.0f,10.0f,12,0.0f,10.0f);		GLfloat ambiente[4] = { 1, 1, 0, 1 };	GLfloat direttiva[4] = { 1, 1, 0, 1 };	GLfloat brillante[4] = { 0.5, 0.5, 0.5, 1 };		glMateriali(GL_FRONT, GL_SHININESS, 32);	glMaterialfv(GL_FRONT, GL_AMBIENT, ambiente);	glMaterialfv(GL_FRONT, GL_DIFFUSE, direttiva);	glMaterialfv(GL_FRONT, GL_SPECULAR, brillante);		glEnable(GL_AUTO_NORMAL);	//glEvalMesh2(GL_LINE,0,10,0,10);	glEvalMesh2(GL_FILL,0,12,0,12);	DrawPoints();	glPopMatrix();	glutSwapBuffers();    }void Azione(unsigned char c, int , int ){	switch(c) {		case 'a': X += 10; break;		case 's': X -= 10; break;		case 'w': Y += 10; break;		case 'z': Y -= 10; break;				case 't': ctrlPoints[2][1][1] += 1; break;		case 'h': ctrlPoints[2][1][1] -= 1; break;			}	glutPostRedisplay();}int main(int argc, char **argv){	glutInit(&argc, argv);	glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);	glutInitWindowPosition(100, 100);	glutInitWindowSize(450, 450);	glutCreateWindow("Bezier 3d");		glEnable(GL_DEPTH_TEST);	glClearColor(.4f, .4f, .4f, 1.0f);	glEnable(GL_LIGHTING);		GLfloat black[4] = { 0, 0, 0, 1 };	GLfloat aLite[4] = { 0, 0, 0, 1 };	GLfloat dLite[4] = { 1, 1, 1, 1 };	GLfloat sLite[4] = { 1, 1, 1, 1 };		GLfloat PosLite[4] = { -1, 1, 1, 0 };		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, black);	glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, 0);		glLightfv(GL_LIGHT0, GL_AMBIENT, aLite);	glLightfv(GL_LIGHT0, GL_DIFFUSE, dLite);	glLightfv(GL_LIGHT0, GL_SPECULAR, sLite);	glLightfv(GL_LIGHT0, GL_POSITION, PosLite);		glEnable(GL_LIGHT0);		glutReshapeFunc(CambiaDim);	glutKeyboardFunc(Azione);	glutDisplayFunc(DisegnaTutto);		glutMainLoop();		return(0);}