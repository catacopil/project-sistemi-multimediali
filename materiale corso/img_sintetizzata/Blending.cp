/* */#include <stdio.h>#include <stdlib.h>#include <time.h>#include <math.h>#include "GL/glut.h"void CambiaDim(int, int);void DisegnaTutto();void AzioneTasto(unsigned char Tasto, int x, int y);void Niente();void CambiaDim(int w, int h){	glViewport(0, 0, w, h);		// matrice	glMatrixMode(GL_PROJECTION);	glLoadIdentity();	glFrustum(-0.5, 0.5, -0.5, 0.5, 1, 1000);}float Rosso, Verde, Blu;float PosX;float Pos2X = -10;float Ang;float OssX, OssZ, OssA;class triangolo {	public:		void Disegna()	{		glBegin(GL_TRIANGLES);		glVertex2f(0, 0);		glVertex2f(20, 0);		glVertex2f(0, 20);		glEnd();	}		void Posiziona(float x, float a)	{		glMatrixMode(GL_MODELVIEW);		glLoadIdentity();		glRotatef(a, 0, 0, 1);		glTranslatef(x, 0, 0);	}		private:		float PosX;	};triangolo Tr;triangolo Tr2;float Alfa = 1.0f;void DisegnaTutto(){	int i;		glClearColor(0.4f, 0.4f, 0.4f, 1.0f);	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		glMatrixMode(GL_MODELVIEW);	glLoadIdentity();	glRotatef(-OssA, 0, 1, 0);	glTranslatef(-OssX, 0, -OssZ);		glColor3f(0, 1, 0);	glBegin(GL_LINES);	for(i = -100;i < 100;i++) {		glVertex3f(-100, -1, i);		glVertex3f(100, -1, i);	}	for(i = -100;i < 100;i++) {		glVertex3f(i, -1, -100);		glVertex3f(i, -1, 100);	}	glEnd();		glPushMatrix();	glTranslatef(PosX, 0, Pos2X);	glRotatef(Ang, 0, 1, 0);		glColor4f(1, 0, 0, Alfa);	glBegin(GL_TRIANGLES);	glVertex2f(0, -1);	glVertex2f(1, -1);	glVertex2f(0, 1);	glEnd();		glPopMatrix();	glPushMatrix();	glTranslatef(5, 0, -10);	glRotatef(Ang, 0, 1, 0);		glColor4f(0, 1, 1, 1.0f);	glBegin(GL_TRIANGLES);	glVertex2f(0, -1);	glVertex2f(1, -1);	glVertex2f(0, 1);	glEnd();		glPopMatrix();		glutSwapBuffers();}void AzioneTasto(unsigned char Tasto, int, int){	switch(Tasto) {		case 'w':			OssZ = OssZ - 0.2f * cos(OssA / 57.3f);			OssX = OssX - 0.2f * sin(OssA / 57.3f);		break;		case 'z':			OssZ = OssZ + 0.2f * cos(OssA / 57.3f);			OssX = OssX + 0.2f * sin(OssA / 57.3f);		break;					case 'a': OssA += 10; break;		case 's': OssA -= 10; break;				case 'o': PosX -= 0.2; break;		case 'p': PosX += 0.2; break;				case 'k': Pos2X -= 0.2; break;		case 'l': Pos2X += 0.2; break;				case 'n': Ang -= 10; break;		case 'm': Ang += 10; break;				case 'f': OssX -= 0.2; break;		case 'g': OssX += 0.2; break;				case 't': OssZ -= 0.2; break;		case 'v': OssZ += 0.2; break;				case '1': Alfa -= 0.1; break;		case '2': Alfa += 0.1; break;			}		glutPostRedisplay();}int main(int argc, char **argv){	glutInit(&argc, argv);		glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);	glutInitWindowPosition(100, 100);	glutInitWindowSize(450, 450);	glutCreateWindow("Blending");		glEnable(GL_DEPTH_TEST);	glEnable(GL_BLEND);	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);		glutReshapeFunc(CambiaDim);	glutDisplayFunc(DisegnaTutto);	glutKeyboardFunc(AzioneTasto);		glutMainLoop();		return(0);}