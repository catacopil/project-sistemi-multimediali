/* */#include <stdio.h>#include <stdlib.h>#include <time.h>#include <math.h>#include "GL/glut.h"void CambiaDim(int, int);void DisegnaTutto();void Azione(unsigned char key, int x, int y);void DisegnaCilindro(GLfloat);void CambiaDim(int w, int h){	if(h == 0) h = 1;		glViewport(0, 0, w, h);		glMatrixMode(GL_PROJECTION);	glLoadIdentity();		glOrtho(-1, 1, -1, 1, 1, -1);		glMatrixMode(GL_MODELVIEW);	glLoadIdentity();	}// in realta' il cilindro non ha le basi!void DisegnaCilindro(GLfloat R){	float t;		glBegin(GL_QUAD_STRIP);		for(t = 0;t < 6.283f;t += (6.283f / 64)) {		glNormal3f(sin(t), 0, cos(t));		glVertex3f(R * sin(t), R, R * cos(t));		glNormal3f(sin(t), 0, cos(t));		glVertex3f(R * sin(t), -R, R * cos(t));	}		glEnd();}GLfloat a, b;void DisegnaTutto(){	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		// matrice	glMatrixMode(GL_PROJECTION);	glLoadIdentity();	glFrustum(-1, 1, -1, 1, 2, 1000);	glMatrixMode(GL_MODELVIEW);		GLfloat ambiente[4] = { 1, 1, 0, 1 };	GLfloat direttiva[4] = { 1, 1, 0, 1 };	GLfloat brillante[4] = { 0.5, 0.5, 0.5, 1 };		glMateriali(GL_FRONT, GL_SHININESS, 32);	glMaterialfv(GL_FRONT, GL_AMBIENT, ambiente);	glMaterialfv(GL_FRONT, GL_DIFFUSE, direttiva);	glMaterialfv(GL_FRONT, GL_SPECULAR, brillante);		glLoadIdentity();	glTranslatef(0, 0, -20);	glRotatef(a, 0, 1, 0);	glRotatef(b, 1, 0, 0);		DisegnaCilindro(5);		glutSwapBuffers();    }void Azione(unsigned char t, int , int ){	switch(t) {		case 'a': a += 5; break;		case 's': a -= 5; break;		case 'q': b += 5; break;		case 'w': b -= 5; break;	}		glutPostRedisplay();}int main(int argc, char **argv){	glutInit(&argc, argv);	glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);	glutInitWindowPosition(100, 100);	glutInitWindowSize(450, 450);	glutCreateWindow("Cilindro Quad-strip");		glEnable(GL_DEPTH_TEST);	glClearColor(0, 0, 0, 1.0f);	glEnable(GL_CULL_FACE);	glEnable(GL_LIGHTING);		GLfloat black[4] = { 0, 0, 0, 1 };	GLfloat aLite[4] = { 0.3, 0.3, 0.3, 1 };	GLfloat dLite[4] = { 1, 1, 1, 1 };	GLfloat sLite[4] = { 1, 1, 1, 1 };		GLfloat PosLite[4] = { 1, 1, 1, 0 };		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, black);	glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, 0);		glLightfv(GL_LIGHT0, GL_AMBIENT, aLite);	glLightfv(GL_LIGHT0, GL_DIFFUSE, dLite);	glLightfv(GL_LIGHT0, GL_SPECULAR, sLite);	glLightfv(GL_LIGHT0, GL_POSITION, PosLite);		glEnable(GL_LIGHT0);		glutReshapeFunc(CambiaDim);	glutKeyboardFunc(Azione);	glutDisplayFunc(DisegnaTutto);		glutMainLoop();		return(0);}