/* */#include <stdio.h>#include <stdlib.h>#include <time.h>#include <math.h>#include "GL/glut.h"void CambiaDim(int, int);void DisegnaTutto();void Azione(unsigned char key, int x, int y);void DisegnaCubo(GLfloat R){	glBegin(GL_QUADS);		glNormal3f(0, 0, 1);	glVertex3f(R, R, R);	glVertex3f(-R, R, R);	glVertex3f(-R, -R, R);	glVertex3f(R, -R, R);		glNormal3f(0, 0, -1);	glVertex3f(-R, R, -R);	glVertex3f(R, R, -R);	glVertex3f(R, -R, -R);	glVertex3f(-R, -R, -R);		glNormal3f(1, 0, 0);	glVertex3f(R, R, -R);	glVertex3f(R, R, R);	glVertex3f(R, -R, R);	glVertex3f(R, -R, -R);		glNormal3f(-1, 0, 0);	glVertex3f(-R, R, R);	glVertex3f(-R, R, -R);	glVertex3f(-R, -R, -R);	glVertex3f(-R, -R, R);		glNormal3f(0, 1, 0);	glVertex3f(R, R, -R);	glVertex3f(-R, R, -R);	glVertex3f(-R, R, R);	glVertex3f(R, R, R);		glNormal3f(0, -1, 0);	glVertex3f(-R, -R, -R);	glVertex3f(R, -R, -R);	glVertex3f(R, -R, R);	glVertex3f(-R, -R, R);		glEnd();}float AngoloX = 0;float AngoloY = 0;void CambiaDim(int w, int h){	glViewport(0, 0, w, h);	}GLfloat PosLite[4] = { 2, 2, 2, 1 };void DisegnaTutto(){	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		// matrici	glMatrixMode(GL_PROJECTION);	glLoadIdentity();	glFrustum(-1, 1, -1, 1, 2, 200);	glMatrixMode(GL_MODELVIEW);	glLoadIdentity();		// luci	GLfloat aLite[4] = { 0.2, 0.2, 0.2, 1 };	GLfloat dLite[4] = { 0.8, 0.8, 0.8, 1 };	GLfloat sLite[4] = { 1, 1, 1, 1 };		glLightfv(GL_LIGHT0, GL_AMBIENT, aLite);	glLightfv(GL_LIGHT0, GL_DIFFUSE, dLite);	glLightfv(GL_LIGHT0, GL_SPECULAR, sLite);		glLightfv(GL_LIGHT0, GL_POSITION, PosLite);		//glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION, 0.01f);	//glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 2.0f);		// materiale	GLfloat ambiente[4] = { 1.0, 1.0, 0.0, 1 };	GLfloat direttiva[4] = { 1.0, 1.0, 0.0, 1 };	GLfloat brillante[4] = { 1, 1, 1, 1 };		glMateriali(GL_FRONT, GL_SHININESS, 32);		glMaterialfv(GL_FRONT, GL_AMBIENT, ambiente);	glMaterialfv(GL_FRONT, GL_DIFFUSE, direttiva);	glMaterialfv(GL_FRONT, GL_SPECULAR, brillante);		// oggetto	glTranslatef(0, -0.5f, -3);		glRotatef(AngoloX, 1, 0, 0);	glRotatef(AngoloY, 0, 1, 0);		DisegnaCubo(0.5f);		glutSwapBuffers();    }void Azione(unsigned char a, int , int ){	if(a == 'a') AngoloY += 10;	if(a == 's') AngoloY -= 10;		if(a == 'w') AngoloX += 10;	if(a == 'z') AngoloX -= 10;		if(a == 'y') PosLite[0] += 0.5f;	if(a == 'b') PosLite[0] -= 0.5f;		glutPostRedisplay();}int main(int argc, char **argv){	glutInit(&argc, argv);	glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);	glutInitWindowPosition(100, 100);	glutInitWindowSize(450, 450);	glutCreateWindow("LightStudio");		glEnable(GL_DEPTH_TEST);	glEnable(GL_CULL_FACE);	//glShadeModel(GL_SMOOTH);	glClearColor(0, 0, 0, 1.0f);		glEnable(GL_LIGHTING);	glEnable(GL_LIGHT0);		GLfloat black[4] = { 0, 0, 0, 1 };		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, black);	glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, 0);		glutReshapeFunc(CambiaDim);	glutKeyboardFunc(Azione);	glutDisplayFunc(DisegnaTutto);		glutMainLoop();		return(0);}